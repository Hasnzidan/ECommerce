@model List<WebApplication1.Models.Cart>
@{
    ViewData["Title"] = "Shopping Cart";
    decimal total = 0;
}

<!-- Breadcrumb -->
<section class="breadcrumb-section">
    <div class="container">
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item active" aria-current="page">Shopping Cart</li>
            </ol>
        </nav>
    </div>
</section>

<section class="cart-section py-5">
    <div class="container">
        @Html.AntiForgeryToken()
        <div class="row">
            <div class="col-lg-8">
                <div class="cart-items-container">
                    <div class="card shadow-sm">
                        <div class="card-header bg-white">
                            <h4 class="mb-0">Shopping Cart (@(Model?.Count ?? 0) items)</h4>
                        </div>
                        
                        @if (!User.Identity.IsAuthenticated)
                        {
                            <div class="card-body text-center py-5">
                                <i class="bi bi-person-lock fs-1 text-muted mb-3"></i>
                                <h4>Please log in to view your cart</h4>
                                <p class="text-muted">You need to be logged in to manage your shopping cart.</p>
                                <a href="/Identity/Account/Login" class="btn btn-primary">
                                    <i class="bi bi-box-arrow-in-right"></i> Log In
                                </a>
                            </div>
                        }
                        else if (Model != null && Model.Any())
                        {
                            <div class="card-body p-0">
                                <div class="table-responsive">
                                    <table class="table">
                                        <thead>
                                            <tr>
                                                <th>Product</th>
                                                <th>Price</th>
                                                <th>Quantity</th>
                                                <th>Total</th>
                                                <th></th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in Model)
                                            {
                                                decimal itemTotal = item.Qty * item.Product.Price;
                                                total += itemTotal;
                                                
                                                <tr>
                                                    <td>
                                                        <div class="d-flex align-items-center">
                                                            <img src="/@(string.IsNullOrEmpty(item.Product.Photo) ? "images/default-product.jpg" : item.Product.Photo)" 
                                                                 class="img-fluid rounded" alt="@item.Product.Name" style="width: 50px; height: 50px; object-fit: cover;" />
                                                            <div class="ms-2">
                                                                <h6 class="mb-0">@item.Product.Name</h6>
                                                                <small class="text-muted">@item.Product.Category?.Name</small>
                                                            </div>
                                                        </div>
                                                    </td>
                                                    <td>@item.Product.Price.ToString("C")</td>
                                                    <td>
                                                        <div class="input-group" style="width: 120px;">
                                                            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="updateQuantity(@item.Id, -1)">-</button>
                                                            <input type="text" class="form-control text-center" value="@item.Qty" readonly>
                                                            <button type="button" class="btn btn-outline-secondary btn-sm" onclick="updateQuantity(@item.Id, 1)">+</button>
                                                        </div>
                                                    </td>
                                                    <td>@itemTotal.ToString("C")</td>
                                                    <td>
                                                        <button class="btn btn-danger btn-sm" onclick="removeFromCart(@item.Id)">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                        <tfoot>
                                            <tr>
                                                <td colspan="3" class="text-end"><strong>Total:</strong></td>
                                                <td><strong>@total.ToString("C")</strong></td>
                                                <td></td>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="card-body text-center py-5">
                                <i class="bi bi-cart-x fs-1 text-muted mb-3"></i>
                                <h4>Your cart is empty</h4>
                                <p class="text-muted">Browse our products and add items to your cart.</p>
                                <a href="/Products" class="btn btn-primary">
                                    <i class="bi bi-shop"></i> Browse Products
                                </a>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <div class="col-lg-4">
                @if (User.Identity.IsAuthenticated && Model != null && Model.Any())
                {
                    <div class="card shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title">Order Summary</h5>
                            <div class="d-flex justify-content-between mb-3">
                                <span>Subtotal:</span>
                                <strong>@total.ToString("C")</strong>
                            </div>
                            <div class="d-flex justify-content-between mb-3">
                                <span>Shipping:</span>
                                <strong>Free</strong>
                            </div>
                            <hr>
                            <div class="d-flex justify-content-between mb-3">
                                <span>Total:</span>
                                <strong>@total.ToString("C")</strong>
                            </div>
                            <button class="btn btn-primary w-100">
                                <i class="bi bi-credit-card"></i> Proceed to Checkout
                            </button>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script>
        async function updateQuantity(cartId, change) {
            try {
                const response = await fetch('/Cart/UpdateQuantity', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({ cartId, change })
                });

                const result = await response.json();
                if (result.success) {
                    location.reload();
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: result.message || 'Failed to update quantity'
                    });
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while updating the quantity'
                });
            }
        }

        async function removeFromCart(cartId) {
            try {
                const result = await Swal.fire({
                    title: 'Remove Item?',
                    text: 'Are you sure you want to remove this item from your cart?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#dc3545',
                    cancelButtonColor: '#6c757d',
                    confirmButtonText: 'Yes, remove it!'
                });

                if (result.isConfirmed) {
                    const response = await fetch('/Cart/RemoveFromCart', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                        },
                        body: JSON.stringify({ cartId })
                    });

                    const data = await response.json();
                    if (data.success) {
                        location.reload();
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: data.message || 'Failed to remove item'
                        });
                    }
                }
            } catch (error) {
                console.error('Error:', error);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'An error occurred while removing the item'
                });
            }
        }
    </script>
}
