@model List<WebApplication1.Models.Cart>
@{
    ViewData["Title"] = "Shopping Cart";
    var antiforgeryToken = Html.AntiForgeryToken();
}

<div class="cart-container">
    <div class="container">
        @antiforgeryToken
        <div class="cart-header">
            <h2 class="cart-title">Shopping Cart</h2>
        </div>
        
        @if (!User.Identity.IsAuthenticated)
        {
            <div class="cart-card">
                <div class="text-center p-4">
                    <h4>Please log in to view your cart</h4>
                    <p>You need to be logged in to manage your shopping cart.</p>
                    <a href="/Identity/Account/Login" class="btn btn-primary">Log In</a>
                </div>
            </div>
        }
        else
        {
            @if (Model != null && Model.Any())
            {
                <div class="cart-items">
                    @foreach (var item in Model)
                    {
                        <div class="cart-item" data-cart-id="@item.Id">
                            <div class="cart-item-details">
                                @if (item.Product != null)
                                {
                                    <h4>@item.Product.Name</h4>
                                    <p class="price">$@item.Product.Price</p>
                                    <div class="quantity-controls">
                                        <button class="btn btn-sm btn-secondary" onclick="updateQuantity(@item.Id, -1)">-</button>
                                        <span class="quantity">@item.Qty</span>
                                        <button class="btn btn-sm btn-secondary" onclick="updateQuantity(@item.Id, 1)">+</button>
                                    </div>
                                    <button class="btn btn-danger btn-sm" onclick="removeFromCart(@item.Id)">Remove</button>
                                }
                                else
                                {
                                    <p>Product not found</p>
                                }
                            </div>
                        </div>
                    }
                </div>
                <div class="cart-summary">
                    <div class="total">
                        <h4>Total: $@Model.Sum(i => (i.Product?.Price ?? 0) * (i.Qty ?? 0))</h4>
                    </div>
                    <button class="btn btn-primary" onclick="proceedToCheckout()">Proceed to Checkout</button>
                </div>
            }
            else
            {
                <div class="cart-empty">
                    <h3>Your cart is empty</h3>
                    <p>Browse our products and add items to your cart.</p>
                    <a href="/Products" class="btn btn-primary">Browse Products</a>
                </div>
            }
        }
    </div>
</div>

@section Scripts {
    <script>
        async function updateQuantity(cartId, change) {
            try {
                const response = await fetch('/Cart/UpdateQuantity', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ cartId, change })
                });

                const result = await response.json();
                if (result.success) {
                    location.reload();
                } else {
                    alert(result.message || 'Failed to update quantity');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while updating the quantity');
            }
        }

        async function removeFromCart(cartId) {
            if (!confirm('Are you sure you want to remove this item?')) return;

            try {
                const response = await fetch('/Cart/RemoveFromCart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ cartId })
                });

                const result = await response.json();
                if (result.success) {
                    location.reload();
                } else {
                    alert(result.message || 'Failed to remove item');
                }
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred while removing the item');
            }
        }

        function proceedToCheckout() {
            // Implement checkout functionality
            alert('Checkout functionality will be implemented soon!');
        }
    </script>
}
