@model WebApplication1.Models.Product
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager

<h1>Product Details</h1>

<div>
    <hr />
    <div class="row">
        <div class="col-md-6">
            <div class="portfolio-wrap">
                <img src="~/@Model.Photo" class="img-fluid" alt="@Model.Name" />
            </div>
            @if (ViewBag.productimages != null && ((List<ProductImage>)ViewBag.productimages).Any())
            {
                <div class="product-gallery mt-4">
                    <div class="row">
                        @foreach (var image in (List<ProductImage>)ViewBag.productimages)
                        {
                            <div class="col-3 mb-3">
                                <img src="~/@image.ImagePath" class="img-fluid thumbnail" alt="Product Image" />
                            </div>
                        }
                    </div>
                </div>
            }
        </div>
        <div class="col-md-6">
            <dl class="row">
                <dt class="col-sm-4">
                    @Html.DisplayNameFor(model => model.Name)
                </dt>
                <dd class="col-sm-8">
                    @Html.DisplayFor(model => model.Name)
                </dd>
                <dt class="col-sm-4">
                    @Html.DisplayNameFor(model => model.Description)
                </dt>
                <dd class="col-sm-8">
                    @Html.DisplayFor(model => model.Description)
                </dd>
                <dt class="col-sm-4">
                    @Html.DisplayNameFor(model => model.Price)
                </dt>
                <dd class="col-sm-8">
                    @Html.DisplayFor(model => model.Price)
                </dd>
                <dt class="col-sm-4">
                    Old Price
                </dt>
                <dd class="col-sm-8">
                    @Html.DisplayFor(model => model.OldPrice)
                </dd>
                <dt class="col-sm-4">
                    Category
                </dt>
                <dd class="col-sm-8">
                    @Html.DisplayFor(model => model.Category.Name)
                </dd>
            </dl>

            <div class="mt-4">
                <div class="form-group">
                    <label for="quantity">Quantity:</label>
                    <input type="number" id="quantity" class="form-control" value="1" min="1" style="width: 100px;" />
                </div>
                @if (SignInManager.IsSignedIn(User))
                {
                    <button onclick="addToCart(@Model.Id)" class="btn btn-primary mt-3">
                        <i class="bi bi-cart-plus"></i> Add to Cart
                    </button>
                }
                else
                {
                    <a href="/Identity/Account/Login" class="btn btn-primary mt-3">
                        <i class="bi bi-cart-plus"></i> Login to Add to Cart
                    </a>
                }
            </div>
            <div>
                <a asp-action="Edit" asp-route-id="@Model?.Id" class="btn btn-primary">Edit</a> |
                <a asp-action="Index" class="btn btn-secondary">Back to List</a>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function addToCart(productId) {
            const quantity = document.getElementById('quantity').value;
            $.ajax({
                url: '/Cart/AddToCart',
                type: 'POST',
                data: {
                    productId: productId,
                    quantity: quantity,
                    __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
                },
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Success!',
                            text: 'Product added to cart successfully',
                            showConfirmButton: false,
                            timer: 1500
                        }).then(function() {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error!',
                            text: response.message || 'Failed to add product to cart'
                        });
                    }
                },
                error: function () {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error!',
                        text: 'An error occurred while adding the product to cart'
                    });
                }
            });
        }
    </script>
}